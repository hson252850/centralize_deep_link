// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target arm64-apple-ios13.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name DeeplinkSDK
import Combine
import CoreLocation
@_exported import DeeplinkSDK
import Foundation
import Swift
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public enum Environment : Swift.String {
  case develop
  case progress
  case uat
  case production
  public var shortKey: Swift.String {
    get
  }
  public var flavor: Swift.String {
    get
  }
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers open class SDKLogger : DeeplinkSDK.Logger {
  override open class var logTag: Swift.String {
    get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class DeepLink : ObjectiveC.NSObject {
  @objc public var url: Foundation.URL?
  @objc final public let vanityURL: Foundation.URL?
  @objc public var parameters: [Swift.String : Any]
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers public class DeeplinkSDK : ObjectiveC.NSObject {
  @objc public static let sdkVersion: Swift.String
  @objc public static let shared: DeeplinkSDK.DeeplinkSDK
  @objc deinit
  @discardableResult
  @objc public static func openAppDelegateUniversalLink(userActivity: Foundation.NSUserActivity) -> Swift.Bool
  @available(iOS 13.0, *)
  @objc public static func openSceneDelegateUniversalLink(scene: UIKit.UIScene, userActivity: Foundation.NSUserActivity)
  @discardableResult
  @objc(handleUniversalLink:completion:) public static func handle(universalLink url: Foundation.URL, completion: @escaping DeeplinkSDK.DynamicLinkUniversalLinkHandler) -> Swift.Bool
  @objc(generateDeeplink:onSuccess:OnFailure:) public static func generateDeeplink(_ data: Foundation.Data, onSuccess: DeeplinkSDK.OnSuccessHandler? = nil, onFailure: DeeplinkSDK.OnFailureHandler? = nil)
  @objc(extractDeeplink:shortUri:onSuccess:OnFailure:) public static func extractDeeplink(_ data: Foundation.Data, shortUri: Swift.String, onSuccess: DeeplinkSDK.OnSuccessHandler? = nil, onFailure: DeeplinkSDK.OnFailureHandler? = nil)
  @objc public var persistLogs: Swift.Bool {
    @objc get
    @objc set
  }
  @objc public func getProjectId() -> Swift.String
  @objc public func getApiKey() -> Swift.String
  @objc public func getSecret() -> Swift.String
}
extension DeeplinkSDK.DeeplinkSDK {
  public func setLogLevel(to level: DeeplinkSDK.Logger.LogLevel)
  public var currentLogLevel: DeeplinkSDK.Logger.LogLevel {
    get
  }
  @objc dynamic public var isLoggingEnabled: Swift.Bool {
    @objc get
  }
}
public typealias DynamicLinkUniversalLinkHandler = (DeeplinkSDK.DeepLink?, (any Swift.Error)?) -> Swift.Void
public typealias OnSuccessHandler = (_ data: [Swift.AnyHashable : Any]?) -> Swift.Void
public typealias OnFailureHandler = (_ error: (any Swift.Error)?) -> Swift.Void
public struct DLMetaData : Swift.Codable {
  public let pageType: Swift.String
  public let pageTitle: Swift.String
  public let pageDescription: Swift.String
  public init(json: Swift.String?) throws
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
public typealias Headers = [Swift.String : Swift.String]
@objc public enum DeeplinkConfigurationType : Swift.Int {
  case SDK
  case APP
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers public class Configuration : ObjectiveC.NSObject {
  @objc nonisolated(unsafe) public static let shared: DeeplinkSDK.Configuration
  @objc public var vanityDomains: [Swift.String]
  @objc public var deeplinkDelegate: (any DeeplinkSDK.DeepLinkDelegate)?
  @objc public var deeplinkConfiguration: DeeplinkSDK.DeeplinkConfigurationType
  @objc public var deelinkURLSessionConfiguration: Foundation.URLSessionConfiguration {
    @objc get
    @objc set
  }
  public func initialize(projectId: Swift.String, apiKey: Swift.String, secret: Swift.String, environment: DeeplinkSDK.Environment = .develop, logLevel: DeeplinkSDK.Logger.LogLevel = .info, persistLogs: Swift.Bool = true)
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class DependencyConfiguration : ObjectiveC.NSObject {
  @objc public static let shared: DeeplinkSDK.DependencyConfiguration
  @objc deinit
}
@_hasMissingDesignatedInitializers public class NativeRequestable : DeeplinkSDK.Requestable {
  public var requestTimeOut: Swift.Float
  public var session: Foundation.URLSession {
    get
  }
  public func request<T>(_ req: DeeplinkSDK.NetworkRequest) -> Combine.AnyPublisher<T, DeeplinkSDK.NetworkError> where T : Swift.Decodable
  @objc deinit
}
public struct GenerateDLRequest : Swift.Codable {
  public var type: Swift.String
  public var metadata: DeeplinkSDK.DLMetaData?
  public var pageUrl: Swift.String
  public var isForceCreate: Swift.Bool
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
@_hasMissingDesignatedInitializers open class Logger {
  open class var logTag: Swift.String {
    get
  }
  open class var moduleTag: Swift.String {
    get
  }
  open class var maxNumberOfFiles: Swift.Int {
    get
  }
  open class var maxFileSize: Swift.Int {
    get
  }
  public enum LogLevel : Swift.Int {
    case `default`
    case debug
    case info
    case warning
    case error
    case none
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  open class func d(_ message: Swift.String)
  open class func i(_ message: Swift.String)
  open class func w(_ message: Swift.String)
  open class func e(_ message: Swift.String)
  open class func log(_ message: Swift.String)
  public static func deletePersistedLogs(completion: (() -> Swift.Void)? = nil)
  public static func didSetLogPersistence(enable: Swift.Bool)
  @objc deinit
}
public protocol Requestable {
  var requestTimeOut: Swift.Float { get }
  var session: Foundation.URLSession { get }
  func request<T>(_ req: DeeplinkSDK.NetworkRequest) -> Combine.AnyPublisher<T, DeeplinkSDK.NetworkError> where T : Swift.Decodable
}
@objc public protocol DeepLinkDelegate {
  @objc func openDeepLink(deepLink: DeeplinkSDK.DeepLink, fallbackURL: Foundation.URL?)
  @available(iOS 13.0, *)
  @objc func openDeepLink(deepLink: DeeplinkSDK.DeepLink, fallbackURL: Foundation.URL?, scene: UIKit.UIScene)
}
extension Foundation.Data {
  public var bytes: [Swift.UInt8] {
    get
  }
}
public struct NetworkRequest {
  public init(url: Swift.String, headers: [Swift.String : Swift.String]? = nil, reqBody: (any Swift.Encodable)? = nil, reqTimeout: Swift.Float? = nil, httpMethod: DeeplinkSDK.HTTPMethod)
  public init(url: Swift.String, headers: [Swift.String : Swift.String]? = nil, reqBody: Foundation.Data? = nil, reqTimeout: Swift.Float? = nil, httpMethod: DeeplinkSDK.HTTPMethod)
}
public enum HTTPMethod : Swift.String {
  case GET
  case POST
  case PUT
  case DELETE
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum NetworkError : Swift.Error, Swift.Equatable {
  case badURL(_: Swift.String)
  case apiError(code: Swift.Int, error: Swift.String)
  case invalidJSON(_: Swift.String)
  case unauthorized(code: Swift.Int, error: Swift.String)
  case badRequest(code: Swift.Int, error: Swift.String)
  case internalError(code: Swift.Int, error: Swift.String)
  case serverError(code: Swift.Int, error: Swift.String)
  case noResponse(_: Swift.String)
  case unableToParseData(_: Swift.String)
  case unknown(code: Swift.Int, error: Swift.String)
  public static func == (a: DeeplinkSDK.NetworkError, b: DeeplinkSDK.NetworkError) -> Swift.Bool
}
extension Foundation.URL {
  public var queryParameters: [Swift.String : Swift.String]? {
    get
  }
}
@propertyWrapper public struct DefaultIfMissing<T> : Swift.Codable where T : DeeplinkSDK.DefaultValueProvider, T : Swift.Decodable, T : Swift.Encodable {
  public let wrappedValue: T
  public init(from decoder: any Swift.Decoder) throws
  public init(_ wrappedValue: T?)
  public init()
  public func encode(to encoder: any Swift.Encoder) throws
}
public protocol DefaultValueProvider {
  static var defaultValue: Self { get }
}
extension Swift.Bool : DeeplinkSDK.DefaultValueProvider {
  public static var defaultValue: Swift.Bool {
    get
  }
}
extension Swift.String : DeeplinkSDK.DefaultValueProvider {
  public static var defaultValue: Swift.String {
    get
  }
}
extension Swift.Int : DeeplinkSDK.DefaultValueProvider {
  public static var defaultValue: Swift.Int {
    get
  }
}
extension Swift.Double : DeeplinkSDK.DefaultValueProvider {
  public static var defaultValue: Swift.Double {
    get
  }
}
extension DeeplinkSDK.Environment : Swift.Equatable {}
extension DeeplinkSDK.Environment : Swift.Hashable {}
extension DeeplinkSDK.Environment : Swift.RawRepresentable {}
extension DeeplinkSDK.DeeplinkConfigurationType : Swift.Equatable {}
extension DeeplinkSDK.DeeplinkConfigurationType : Swift.Hashable {}
extension DeeplinkSDK.DeeplinkConfigurationType : Swift.RawRepresentable {}
extension DeeplinkSDK.Logger.LogLevel : Swift.Equatable {}
extension DeeplinkSDK.Logger.LogLevel : Swift.Hashable {}
extension DeeplinkSDK.Logger.LogLevel : Swift.RawRepresentable {}
extension DeeplinkSDK.HTTPMethod : Swift.Equatable {}
extension DeeplinkSDK.HTTPMethod : Swift.Hashable {}
extension DeeplinkSDK.HTTPMethod : Swift.RawRepresentable {}
